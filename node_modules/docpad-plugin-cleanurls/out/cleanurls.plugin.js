// Generated by CoffeeScript 1.9.3
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  module.exports = function(BasePlugin) {
    var CleanUrlsPlugin;
    return CleanUrlsPlugin = (function(superClass) {
      extend(CleanUrlsPlugin, superClass);

      function CleanUrlsPlugin() {
        this.cleanUrlsForDocument = bind(this.cleanUrlsForDocument, this);
        return CleanUrlsPlugin.__super__.constructor.apply(this, arguments);
      }

      CleanUrlsPlugin.prototype.name = 'cleanurls';

      CleanUrlsPlugin.prototype.config = {
        redirectTemplateEncoding: 'utf8',
        getRedirectScript: function(advancedRedirects) {
          var pattern, replacement, serializedRedirects;
          serializedRedirects = '[' + ((function() {
            var i, len, ref, results;
            results = [];
            for (i = 0, len = advancedRedirects.length; i < len; i++) {
              ref = advancedRedirects[i], pattern = ref[0], replacement = ref[1];
              results.push('[' + (typeof pattern === 'string' ? '"' + pattern + '"' : pattern.toString()) + ', "' + replacement + '"]');
            }
            return results;
          })()).join(', ') + ']';
          return "(function(){\n	var advancedRedirects = " + serializedRedirects + ";\n	var relativeURL = location.pathname + (location.search || '');\n	var absoluteURL = location.href;\n	advancedRedirects.forEach(function(value){\n		var pattern = value[0], replacement = value[1], sourceURL, targetURL;\n		if ( typeof pattern === 'string' ) {\n			if ( pattern === relativeURL || pattern === absoluteURL ) {\n				document.location.href = replacement;\n			}\n		}\n		else {\n			if ( pattern.test(sourceURL = relativeURL) || pattern.test(sourceURL = absoluteURL) ) {\n				targetURL = sourceURL.replace(pattern, replacement);\n				document.location.href = targetURL;\n			}\n		}\n	})\n})()";
        },
        getRedirectTemplate: function(url, title) {
          return "<!DOCTYPE html>\n<html>\n	<head>\n		<title>" + (title || 'Redirect') + "</title>\n		<meta http-equiv=\"REFRESH\" content=\"0; url=" + url + "\">\n		<link rel=\"canonical\" href=\"" + url + "\" />\n	</head>\n	<body>\n		This page has moved. You will be automatically redirected to its new location. If you aren't forwarded to the new page, <a href=\"" + url + "\">click here</a>.\n		<script>document.location.href = \"" + url + "\"</script>\n	</body>\n</html>";
        },
        trailingSlashes: false,
        collectionName: 'html',
        "static": false,
        environments: {
          "static": {
            "static": true
          }
        },
        simpleRedirects: null,
        advancedRedirects: null
      };

      CleanUrlsPlugin.prototype.cleanUrlsForDocument = function(document) {
        var pathUtil, relativeBaseUrl, relativeDirUrl, trailingSlashes, url;
        url = document.get('url');
        pathUtil = require('path');
        trailingSlashes = this.config.trailingSlashes;
        if (/index\.html$/i.test(url)) {
          relativeDirUrl = pathUtil.dirname(url);
          if (trailingSlashes && relativeDirUrl !== '/') {
            relativeDirUrl += '/';
          }
          document.setUrl(relativeDirUrl);
        } else if (/\.html$/i.test(url)) {
          relativeBaseUrl = url.replace(/\.html$/, '');
          document.setUrl(relativeBaseUrl + (trailingSlashes ? '/' : ''));
          document.addUrl(relativeBaseUrl + (trailingSlashes ? '' : '/'));
        }
        return document;
      };

      CleanUrlsPlugin.prototype.renderBefore = function(opts) {
        var collection, config, docpad;
        docpad = this.docpad;
        config = this.getConfig();
        collection = docpad.getCollection(config.collectionName);
        docpad.log('debug', 'Applying clean urls');
        collection.forEach(this.cleanUrlsForDocument);
        docpad.log('debug', 'Applied clean urls');
        return this;
      };

      CleanUrlsPlugin.prototype.docpadReady = function(opts, next) {
        var config, err, ref, sourceURL, targetURL;
        config = this.getConfig();
        if (config.simpleRedirects) {
          ref = config.simpleRedirects;
          for (sourceURL in ref) {
            if (!hasProp.call(ref, sourceURL)) continue;
            targetURL = ref[sourceURL];
            if (sourceURL.indexOf('://') !== -1) {
              err = new Error("Simple redirections via the Clean URLs plugin requires the source URLs to be relative URLs.\nYou must change [" + sourceURL + "] into a relative URL to continue.\nThis can be done via your DocPad configuration file under the cleanurls plugin section.");
              return next(err);
            }
          }
        }
        next();
        return this;
      };

      CleanUrlsPlugin.prototype.writeAfter = function(opts, next) {
        var TaskGroup, addWriteTask, collection, config, destinationFullUrl, destinationURL, docpad, docpadConfig, getCleanOutPathFromUrl, pathUtil, plugin, redirectContent, ref, ref1, safefs, siteURL, sourceURL, sourceURLPath, tasks;
        plugin = this;
        docpad = this.docpad;
        config = this.getConfig();
        docpadConfig = docpad.getConfig();
        siteURL = ((ref = docpadConfig.site) != null ? ref.url : void 0) || '';
        collection = docpad.getCollection(config.collectionName);
        TaskGroup = require('taskgroup');
        safefs = require('safefs');
        pathUtil = require('path');
        getCleanOutPathFromUrl = function(url) {
          url = url.replace(/\/+$/, '');
          if (/index.html$/.test(url)) {
            return pathUtil.join(docpadConfig.outPath, url);
          } else {
            return pathUtil.join(docpadConfig.outPath, url.replace(/\.html$/, '') + '/index.html');
          }
        };
        if (config["static"] === true) {
          docpad.log('debug', 'Writing static clean url files');
          tasks = new TaskGroup().setConfig({
            concurrency: 0
          }).done(function(err) {
            docpad.log('debug', 'Wrote static clean url files');
            return next(err);
          });
          addWriteTask = function(outPath, outContent) {
            return tasks.addTask(function(complete) {
              return safefs.writeFile(outPath, outContent, config.redirectTemplateEncoding, complete);
            });
          };
          if (config.simpleRedirects) {
            ref1 = config.simpleRedirects;
            for (sourceURL in ref1) {
              if (!hasProp.call(ref1, sourceURL)) continue;
              destinationURL = ref1[sourceURL];
              sourceURLPath = getCleanOutPathFromUrl(sourceURL);
              destinationFullUrl = destinationURL;
              if (destinationURL[0] = '/') {
                destinationFullUrl = siteURL + destinationURL;
              }
              redirectContent = config.getRedirectTemplate.call(plugin, destinationFullUrl);
              addWriteTask(sourceURLPath, redirectContent);
            }
          }
          collection.forEach(function(document) {
            var encoding, i, j, len, len1, primaryOutPath, primaryUrl, primaryUrlOutPath, redirectOutPath, redirectOutPaths, results, url, urls;
            if (document.get('write') === false || document.get('ignore') === true || document.get('render') === false || document.get('url') === '/404') {
              return;
            }
            encoding = document.get('encoding');
            primaryUrl = document.get('url');
            primaryUrlOutPath = getCleanOutPathFromUrl(primaryUrl);
            primaryOutPath = document.get('outPath');
            urls = document.get('urls');
            destinationFullUrl = siteURL + document.get('url');
            redirectContent = config.getRedirectTemplate.call(plugin, destinationFullUrl, document.get('title'));
            redirectOutPaths = [];
            if (primaryUrlOutPath !== primaryOutPath) {
              addWriteTask(primaryUrlOutPath, document.getOutContent(), encoding);
              redirectOutPaths.push(primaryOutPath);
            }
            for (i = 0, len = urls.length; i < len; i++) {
              url = urls[i];
              redirectOutPath = getCleanOutPathFromUrl(url);
              if ((indexOf.call(redirectOutPaths, redirectOutPath) >= 0) === false && redirectOutPath !== primaryUrlOutPath) {
                redirectOutPaths.push(redirectOutPath);
              }
            }
            results = [];
            for (j = 0, len1 = redirectOutPaths.length; j < len1; j++) {
              redirectOutPath = redirectOutPaths[j];
              results.push(addWriteTask(redirectOutPath, redirectContent, encoding));
            }
            return results;
          });
          tasks.run();
        } else {
          next();
        }
        return this;
      };

      CleanUrlsPlugin.prototype.populateCollections = function(opts) {
        var config, docpad;
        docpad = this.docpad;
        config = this.getConfig();
        if (config["static"] === true && config.advancedRedirects) {
          docpad.log('info', 'Adding clean URLs regex redirect script block');
          docpad.getBlock('scripts').add(this.config.getRedirectScript.call(this, config.advancedRedirects), {
            defer: false
          });
        }
        return this;
      };

      CleanUrlsPlugin.prototype.serverExtend = function(opts) {
        var codeRedirectPermanent;
        codeRedirectPermanent = 301;
        opts.server.use((function(_this) {
          return function(req, res, next) {
            var config, destinationURL, docpadConfig, i, len, pattern, ref, ref1, ref2, ref3, replacement, siteURL, sourceURL;
            config = _this.getConfig();
            if (config["static"] === false) {
              docpadConfig = _this.docpad.getConfig();
              siteURL = ((ref = docpadConfig.site) != null ? ref.url : void 0) || '';
              if (destinationURL = (ref1 = config.simpleRedirects) != null ? ref1[req.url] : void 0) {
                res.redirect(codeRedirectPermanent, destinationURL);
                return _this;
              }
              if (config.advancedRedirects) {
                ref2 = config.advancedRedirects;
                for (i = 0, len = ref2.length; i < len; i++) {
                  ref3 = ref2[i], pattern = ref3[0], replacement = ref3[1];
                  if (typeof pattern === 'string') {
                    if (pattern === req.url || pattern === siteURL + req.url) {
                      res.redirect(codeRedirectPermanent, replacement);
                      return _this;
                    }
                  } else {
                    if (pattern.test(sourceURL = req.url) || pattern.test(sourceURL = siteURL + req.url)) {
                      destinationURL = sourceURL.replace(pattern, replacement);
                      res.redirect(codeRedirectPermanent, destinationURL);
                      return _this;
                    }
                  }
                }
              }
            }
            return next();
          };
        })(this));
        return this;
      };

      return CleanUrlsPlugin;

    })(BasePlugin);
  };

}).call(this);
