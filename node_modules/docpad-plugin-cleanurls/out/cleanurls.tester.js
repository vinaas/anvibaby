// Generated by CoffeeScript 1.9.3
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  module.exports = function(testers) {
    var MyTester, assertDeepEqual, assertEqual, ref, request;
    ref = require('assert-helpers'), assertEqual = ref.assertEqual, assertDeepEqual = ref.assertDeepEqual;
    request = require('request');
    return MyTester = (function(superClass) {
      extend(MyTester, superClass);

      function MyTester() {
        return MyTester.__super__.constructor.apply(this, arguments);
      }

      MyTester.prototype.testGenerate = testers.RendererTester.prototype.testGenerate;

      MyTester.prototype.testServer = function(next) {
        var tester;
        tester = this;
        MyTester.__super__.testServer.apply(this, arguments);
        return this.suite('cleanurls', function(suite, test) {
          var outExpectedPath, plugin, pluginConfig, siteURL;
          siteURL = "http://localhost:" + tester.docpad.config.port;
          outExpectedPath = tester.config.outExpectedPath;
          plugin = tester.docpad.getPlugin('cleanurls');
          pluginConfig = plugin.getConfig();
          suite('cleanurls for documents suite', function(suite, test) {
            test('server should serve URLs without an extension', function(done) {
              var fullURL;
              fullURL = siteURL + '/welcome/';
              return request(fullURL, function(err, response, actual) {
                var actualStr, expectedStr;
                if (err) {
                  return done(err);
                }
                actualStr = actual.toString();
                expectedStr = 'Welcome Page!';
                assertEqual(actualStr, expectedStr, 'result from welcome URL contains expected content');
                return done();
              });
            });
            return test('documents should have urls without extensions', function(done) {
              var actualUrls, expectedUrls;
              actualUrls = tester.docpad.getCollection('documents').map(function(doc) {
                return doc.get('url');
              });
              if (pluginConfig.trailingSlashes) {
                expectedUrls = ['/', '/404/', '/hi', '/welcome/'];
              } else {
                expectedUrls = ['/', '/404', '/hi', '/welcome'];
              }
              assertDeepEqual(actualUrls.sort(), expectedUrls, 'URLs are as expected');
              return done();
            });
          });
          return suite('redirect configuration suite', function(suite, test) {
            if (tester.docpadConfig.environment === 'development') {
              test('test redirect middleware', function(done) {
                var fullURL;
                fullURL = siteURL + '/open';
                return request(fullURL, function(err, response, actual) {
                  var actualStr, expectedStr;
                  if (err) {
                    return done(err);
                  }
                  actualStr = actual.toString();
                  expectedStr = pluginConfig.getRedirectTemplate('/sesame');
                  assertEqual(actualStr, expectedStr, 'result from a simple redirect URL contains the expected content');
                  return done();
                });
              });
              test('test advanced redirect middleware', function(done) {
                var fullURL;
                fullURL = siteURL + '/gh/website';
                return request(fullURL, function(err, response, actual) {
                  var actualStr, expectedStr;
                  if (err) {
                    return done(err);
                  }
                  actualStr = actual.toString();
                  expectedStr = pluginConfig.getRedirectTemplate('https://github.com/bevry/website');
                  assertEqual(actualStr, expectedStr, 'result from an advanced redirect URL contains the expected content');
                  return done();
                });
              });
            }
            if (tester.docpadConfig.environment === 'static') {
              return test('test redirect file', function(done) {
                var fullURL;
                fullURL = siteURL + '/open' + '/index.html';
                return request(fullURL, function(err, response, actual) {
                  var actualStr, expectedStr;
                  if (err) {
                    return done(err);
                  }
                  actualStr = actual.toString();
                  expectedStr = pluginConfig.getRedirectTemplate('/sesame');
                  assertEqual(actualStr, expectedStr, 'result from a simple redirect URL contains the expected content');
                  return done();
                });
              });
            }
          });
        });
      };

      return MyTester;

    })(testers.ServerTester);
  };

}).call(this);
